/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PropertyValuation {
  export type ValuationStruct = {
    estimatedValue: BigNumberish;
    comparableValue: BigNumberish;
    lastUpdated: BigNumberish;
    locationScore: BigNumberish;
    sizeScore: BigNumberish;
    conditionScore: BigNumberish;
    ageScore: BigNumberish;
    renovationScore: BigNumberish;
    isVerified: boolean;
    verificationVotes: BigNumberish;
    rejectionVotes: BigNumberish;
  };

  export type ValuationStructOutput = [
    estimatedValue: bigint,
    comparableValue: bigint,
    lastUpdated: bigint,
    locationScore: bigint,
    sizeScore: bigint,
    conditionScore: bigint,
    ageScore: bigint,
    renovationScore: bigint,
    isVerified: boolean,
    verificationVotes: bigint,
    rejectionVotes: bigint
  ] & {
    estimatedValue: bigint;
    comparableValue: bigint;
    lastUpdated: bigint;
    locationScore: bigint;
    sizeScore: bigint;
    conditionScore: bigint;
    ageScore: bigint;
    renovationScore: bigint;
    isVerified: boolean;
    verificationVotes: bigint;
    rejectionVotes: bigint;
  };
}

export interface PropertyValuationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REJECTION_THRESHOLD"
      | "VERIFICATION_THRESHOLD"
      | "confirmValuationUpdate"
      | "getHistoricalValues"
      | "getPendingValuation"
      | "getValuation"
      | "hasUserVoted"
      | "historicalValues"
      | "owner"
      | "pendingValuationVotes"
      | "pendingValuations"
      | "propertyNFT"
      | "renounceOwnership"
      | "submitValuation"
      | "transferOwnership"
      | "valuations"
      | "voteOnValuation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ValuationSubmitted"
      | "ValuationUpdated"
      | "ValuationVerified"
      | "ValuationVoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REJECTION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFICATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmValuationUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalValues",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingValuation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValuation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "historicalValues",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValuationVotes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValuations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitValuation",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "valuations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnValuation",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "REJECTION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFICATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmValuationUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historicalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValuationVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValuations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valuations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnValuation",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationSubmittedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    estimatedValue: BigNumberish,
    comparableValue: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    estimatedValue: bigint,
    comparableValue: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    estimatedValue: bigint;
    comparableValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    estimatedValue: BigNumberish,
    comparableValue: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    estimatedValue: bigint,
    comparableValue: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    estimatedValue: bigint;
    comparableValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationVerifiedEvent {
  export type InputTuple = [tokenId: BigNumberish, verified: boolean];
  export type OutputTuple = [tokenId: bigint, verified: boolean];
  export interface OutputObject {
    tokenId: bigint;
    verified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValuationVoteCastEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    voter: AddressLike,
    approve: boolean
  ];
  export type OutputTuple = [tokenId: bigint, voter: string, approve: boolean];
  export interface OutputObject {
    tokenId: bigint;
    voter: string;
    approve: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PropertyValuation extends BaseContract {
  connect(runner?: ContractRunner | null): PropertyValuation;
  waitForDeployment(): Promise<this>;

  interface: PropertyValuationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REJECTION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VERIFICATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  confirmValuationUpdate: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHistoricalValues: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getPendingValuation: TypedContractMethod<
    [propertyId: BigNumberish],
    [PropertyValuation.ValuationStructOutput],
    "view"
  >;

  getValuation: TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        estimatedValue: bigint;
        comparableValue: bigint;
        lastUpdated: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        isVerified: boolean;
        verificationVotes: bigint;
        rejectionVotes: bigint;
      }
    ],
    "view"
  >;

  hasUserVoted: TypedContractMethod<
    [_tokenId: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;

  historicalValues: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingValuationVotes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  pendingValuations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        estimatedValue: bigint;
        comparableValue: bigint;
        lastUpdated: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        isVerified: boolean;
        verificationVotes: bigint;
        rejectionVotes: bigint;
      }
    ],
    "view"
  >;

  propertyNFT: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitValuation: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _estimatedValue: BigNumberish,
      _comparableValue: BigNumberish,
      _locationScore: BigNumberish,
      _sizeScore: BigNumberish,
      _conditionScore: BigNumberish,
      _ageScore: BigNumberish,
      _renovationScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  valuations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        estimatedValue: bigint;
        comparableValue: bigint;
        lastUpdated: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        isVerified: boolean;
        verificationVotes: bigint;
        rejectionVotes: bigint;
      }
    ],
    "view"
  >;

  voteOnValuation: TypedContractMethod<
    [_tokenId: BigNumberish, _approve: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REJECTION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFICATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmValuationUpdate"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHistoricalValues"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPendingValuation"
  ): TypedContractMethod<
    [propertyId: BigNumberish],
    [PropertyValuation.ValuationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValuation"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        estimatedValue: bigint;
        comparableValue: bigint;
        lastUpdated: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        isVerified: boolean;
        verificationVotes: bigint;
        rejectionVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserVoted"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "historicalValues"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingValuationVotes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingValuations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        estimatedValue: bigint;
        comparableValue: bigint;
        lastUpdated: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        isVerified: boolean;
        verificationVotes: bigint;
        rejectionVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propertyNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitValuation"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _estimatedValue: BigNumberish,
      _comparableValue: BigNumberish,
      _locationScore: BigNumberish,
      _sizeScore: BigNumberish,
      _conditionScore: BigNumberish,
      _ageScore: BigNumberish,
      _renovationScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "valuations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        estimatedValue: bigint;
        comparableValue: bigint;
        lastUpdated: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        isVerified: boolean;
        verificationVotes: bigint;
        rejectionVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "voteOnValuation"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _approve: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ValuationSubmitted"
  ): TypedContractEvent<
    ValuationSubmittedEvent.InputTuple,
    ValuationSubmittedEvent.OutputTuple,
    ValuationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ValuationUpdated"
  ): TypedContractEvent<
    ValuationUpdatedEvent.InputTuple,
    ValuationUpdatedEvent.OutputTuple,
    ValuationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ValuationVerified"
  ): TypedContractEvent<
    ValuationVerifiedEvent.InputTuple,
    ValuationVerifiedEvent.OutputTuple,
    ValuationVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ValuationVoteCast"
  ): TypedContractEvent<
    ValuationVoteCastEvent.InputTuple,
    ValuationVoteCastEvent.OutputTuple,
    ValuationVoteCastEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ValuationSubmitted(uint256,uint256,uint256)": TypedContractEvent<
      ValuationSubmittedEvent.InputTuple,
      ValuationSubmittedEvent.OutputTuple,
      ValuationSubmittedEvent.OutputObject
    >;
    ValuationSubmitted: TypedContractEvent<
      ValuationSubmittedEvent.InputTuple,
      ValuationSubmittedEvent.OutputTuple,
      ValuationSubmittedEvent.OutputObject
    >;

    "ValuationUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;
    ValuationUpdated: TypedContractEvent<
      ValuationUpdatedEvent.InputTuple,
      ValuationUpdatedEvent.OutputTuple,
      ValuationUpdatedEvent.OutputObject
    >;

    "ValuationVerified(uint256,bool)": TypedContractEvent<
      ValuationVerifiedEvent.InputTuple,
      ValuationVerifiedEvent.OutputTuple,
      ValuationVerifiedEvent.OutputObject
    >;
    ValuationVerified: TypedContractEvent<
      ValuationVerifiedEvent.InputTuple,
      ValuationVerifiedEvent.OutputTuple,
      ValuationVerifiedEvent.OutputObject
    >;

    "ValuationVoteCast(uint256,address,bool)": TypedContractEvent<
      ValuationVoteCastEvent.InputTuple,
      ValuationVoteCastEvent.OutputTuple,
      ValuationVoteCastEvent.OutputObject
    >;
    ValuationVoteCast: TypedContractEvent<
      ValuationVoteCastEvent.InputTuple,
      ValuationVoteCastEvent.OutputTuple,
      ValuationVoteCastEvent.OutputObject
    >;
  };
}
