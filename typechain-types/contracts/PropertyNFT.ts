/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PropertyNFT {
  export type PropertySummaryStruct = {
    tokenId: BigNumberish;
    propertyAddress: string;
    ownerName: string;
    propertyType: string;
    renovationDate: BigNumberish;
    imageURI: string;
    latitude: BigNumberish;
    longitude: BigNumberish;
    isVerified: boolean;
    estimatedValue: BigNumberish;
    verificationVotes: BigNumberish;
    rejectionVotes: BigNumberish;
    currentOwner: AddressLike;
  };

  export type PropertySummaryStructOutput = [
    tokenId: bigint,
    propertyAddress: string,
    ownerName: string,
    propertyType: string,
    renovationDate: bigint,
    imageURI: string,
    latitude: bigint,
    longitude: bigint,
    isVerified: boolean,
    estimatedValue: bigint,
    verificationVotes: bigint,
    rejectionVotes: bigint,
    currentOwner: string
  ] & {
    tokenId: bigint;
    propertyAddress: string;
    ownerName: string;
    propertyType: string;
    renovationDate: bigint;
    imageURI: string;
    latitude: bigint;
    longitude: bigint;
    isVerified: boolean;
    estimatedValue: bigint;
    verificationVotes: bigint;
    rejectionVotes: bigint;
    currentOwner: string;
  };
}

export interface PropertyNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REJECTION_THRESHOLD"
      | "VERIFICATION_THRESHOLD"
      | "addressExists"
      | "approve"
      | "authorizedContracts"
      | "balanceOf"
      | "getApproved"
      | "getMultipleProperties"
      | "getOwnerPropertiesDetailed"
      | "getPropertiesByType"
      | "isApprovedForAll"
      | "isAuthorizedContract"
      | "name"
      | "owner"
      | "ownerOf"
      | "ownerProperties"
      | "properties"
      | "propertiesByType"
      | "propertiesByYearRange"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setAuthorizedContract"
      | "submitProperty"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "updatePropertyValuation"
      | "updatePropertyValue"
      | "voteOnProperty"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "ContractAuthorized"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "PropertySubmitted"
      | "PropertyValueUpdated"
      | "PropertyVerified"
      | "Transfer"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REJECTION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFICATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleProperties",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPropertiesDetailed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertiesByType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerProperties",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "properties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertiesByType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertiesByYearRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProperty",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePropertyValuation",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePropertyValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnProperty",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "REJECTION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFICATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPropertiesDetailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertiesByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "properties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertiesByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertiesByYearRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePropertyValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePropertyValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnProperty",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractAuthorizedEvent {
  export type InputTuple = [contractAddress: AddressLike, authorized: boolean];
  export type OutputTuple = [contractAddress: string, authorized: boolean];
  export interface OutputObject {
    contractAddress: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertySubmittedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    propertyAddress: string,
    ownerName: string,
    submitter: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    propertyAddress: string,
    ownerName: string,
    submitter: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    propertyAddress: string;
    ownerName: string;
    submitter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyValueUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [tokenId: bigint, newValue: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyVerifiedEvent {
  export type InputTuple = [tokenId: BigNumberish, verified: boolean];
  export type OutputTuple = [tokenId: bigint, verified: boolean];
  export interface OutputObject {
    tokenId: bigint;
    verified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    voter: AddressLike,
    approve: boolean
  ];
  export type OutputTuple = [tokenId: bigint, voter: string, approve: boolean];
  export interface OutputObject {
    tokenId: bigint;
    voter: string;
    approve: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PropertyNFT extends BaseContract {
  connect(runner?: ContractRunner | null): PropertyNFT;
  waitForDeployment(): Promise<this>;

  interface: PropertyNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REJECTION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VERIFICATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  addressExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getMultipleProperties: TypedContractMethod<
    [_tokenIds: BigNumberish[]],
    [PropertyNFT.PropertySummaryStructOutput[]],
    "view"
  >;

  getOwnerPropertiesDetailed: TypedContractMethod<
    [_owner: AddressLike],
    [PropertyNFT.PropertySummaryStructOutput[]],
    "view"
  >;

  getPropertiesByType: TypedContractMethod<
    [_propertyType: string],
    [bigint[]],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedContract: TypedContractMethod<
    [_contract: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  ownerProperties: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  properties: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        propertyAddress: string;
        ownerName: string;
        propertyType: string;
        renovationDate: bigint;
        imageURI: string;
        latitude: bigint;
        longitude: bigint;
        isVerified: boolean;
        estimatedValue: bigint;
        verificationVotes: bigint;
        rejectionVotes: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        comparableValue: bigint;
        lastValuationUpdate: bigint;
      }
    ],
    "view"
  >;

  propertiesByType: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  propertiesByYearRange: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setAuthorizedContract: TypedContractMethod<
    [_contract: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  submitProperty: TypedContractMethod<
    [
      _propertyAddress: string,
      _ownerName: string,
      _propertyType: string,
      _renovationDate: BigNumberish,
      _imageURI: string,
      _latitude: BigNumberish,
      _longitude: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePropertyValuation: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _estimatedValue: BigNumberish,
      _comparableValue: BigNumberish,
      _locationScore: BigNumberish,
      _sizeScore: BigNumberish,
      _conditionScore: BigNumberish,
      _ageScore: BigNumberish,
      _renovationScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updatePropertyValue: TypedContractMethod<
    [_tokenId: BigNumberish, _newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteOnProperty: TypedContractMethod<
    [_tokenId: BigNumberish, _approve: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REJECTION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFICATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMultipleProperties"
  ): TypedContractMethod<
    [_tokenIds: BigNumberish[]],
    [PropertyNFT.PropertySummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerPropertiesDetailed"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [PropertyNFT.PropertySummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPropertiesByType"
  ): TypedContractMethod<[_propertyType: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedContract"
  ): TypedContractMethod<[_contract: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ownerProperties"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "properties"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        propertyAddress: string;
        ownerName: string;
        propertyType: string;
        renovationDate: bigint;
        imageURI: string;
        latitude: bigint;
        longitude: bigint;
        isVerified: boolean;
        estimatedValue: bigint;
        verificationVotes: bigint;
        rejectionVotes: bigint;
        locationScore: bigint;
        sizeScore: bigint;
        conditionScore: bigint;
        ageScore: bigint;
        renovationScore: bigint;
        comparableValue: bigint;
        lastValuationUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propertiesByType"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "propertiesByYearRange"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedContract"
  ): TypedContractMethod<
    [_contract: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitProperty"
  ): TypedContractMethod<
    [
      _propertyAddress: string,
      _ownerName: string,
      _propertyType: string,
      _renovationDate: BigNumberish,
      _imageURI: string,
      _latitude: BigNumberish,
      _longitude: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePropertyValuation"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _estimatedValue: BigNumberish,
      _comparableValue: BigNumberish,
      _locationScore: BigNumberish,
      _sizeScore: BigNumberish,
      _conditionScore: BigNumberish,
      _ageScore: BigNumberish,
      _renovationScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePropertyValue"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _newValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteOnProperty"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _approve: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "ContractAuthorized"
  ): TypedContractEvent<
    ContractAuthorizedEvent.InputTuple,
    ContractAuthorizedEvent.OutputTuple,
    ContractAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PropertySubmitted"
  ): TypedContractEvent<
    PropertySubmittedEvent.InputTuple,
    PropertySubmittedEvent.OutputTuple,
    PropertySubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyValueUpdated"
  ): TypedContractEvent<
    PropertyValueUpdatedEvent.InputTuple,
    PropertyValueUpdatedEvent.OutputTuple,
    PropertyValueUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyVerified"
  ): TypedContractEvent<
    PropertyVerifiedEvent.InputTuple,
    PropertyVerifiedEvent.OutputTuple,
    PropertyVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "ContractAuthorized(address,bool)": TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;
    ContractAuthorized: TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PropertySubmitted(uint256,string,string,address)": TypedContractEvent<
      PropertySubmittedEvent.InputTuple,
      PropertySubmittedEvent.OutputTuple,
      PropertySubmittedEvent.OutputObject
    >;
    PropertySubmitted: TypedContractEvent<
      PropertySubmittedEvent.InputTuple,
      PropertySubmittedEvent.OutputTuple,
      PropertySubmittedEvent.OutputObject
    >;

    "PropertyValueUpdated(uint256,uint256)": TypedContractEvent<
      PropertyValueUpdatedEvent.InputTuple,
      PropertyValueUpdatedEvent.OutputTuple,
      PropertyValueUpdatedEvent.OutputObject
    >;
    PropertyValueUpdated: TypedContractEvent<
      PropertyValueUpdatedEvent.InputTuple,
      PropertyValueUpdatedEvent.OutputTuple,
      PropertyValueUpdatedEvent.OutputObject
    >;

    "PropertyVerified(uint256,bool)": TypedContractEvent<
      PropertyVerifiedEvent.InputTuple,
      PropertyVerifiedEvent.OutputTuple,
      PropertyVerifiedEvent.OutputObject
    >;
    PropertyVerified: TypedContractEvent<
      PropertyVerifiedEvent.InputTuple,
      PropertyVerifiedEvent.OutputTuple,
      PropertyVerifiedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
